# NoSQL Injection Scanner (Go Version)

A powerful tool for detecting NoSQL injection vulnerabilities in web applications. This scanner automatically detects the underlying NoSQL database type and tests for various injection patterns.

## Features

- üîç Automatic database type detection (MongoDB, CouchDB, Elasticsearch, Firebase)
- üéØ Multiple injection techniques (Authentication bypass, Injection patterns)
- üìù Detailed JSON reports
- üöÄ Easy to use CLI interface
- üîÑ Automatic payload downloads
- üõ°Ô∏è Support for custom headers and cookies

## Installation

1. Install Go (1.21 or later):
   - Windows: Download from https://golang.org/dl/
   - Linux: `sudo apt-get install golang`
   - macOS: `brew install go`

2. Install the scanner:
```bash
go install github.com/yourusername/nosqli-scanner@latest
```

## Usage

Basic scan with GET request:
```bash
nosqli-scanner --url "https://example.com/api/users?id=123"
```

POST request with data:
```bash
nosqli-scanner --url "https://example.com/api/login" \
    --method POST \
    --data '{"username":"test","password":"test123"}' \
    --headers '{"Authorization":"Bearer xyz"}'
```

### Command Line Options

- `-u, --url`: Target URL (required)
- `-m, --method`: HTTP method (GET or POST, default: GET)
- `-H, --headers`: Headers as JSON string
- `-c, --cookies`: Cookie string
- `-d, --data`: POST data as JSON string
- `-t, --db-type`: Force database type (mongodb, couchdb, elasticsearch, firebase)

## Example Scan

```bash
nosqli-scanner --url "https://api.example.com/users" \
    --method POST \
    --headers '{"Content-Type": "application/json", "Authorization": "Bearer token123"}' \
    --data '{"username": "admin"}'
```

## Output

The scanner generates a detailed JSON report containing:
- Scan information (URL, method, detected database)
- List of vulnerabilities found
- Test statistics
- Timestamp

Example report structure:
```json
{
  "scan_info": {
    "url": "https://example.com/api",
    "method": "POST",
    "detected_db": "mongodb",
    "timestamp": "2025-05-20T10:30:00Z",
    "total_tests": 15,
    "total_vulns": 2
  },
  "vulnerabilities": [
    {
      "type": "Authentication Bypass",
      "payload": {"username": {"$ne": null}},
      "reason": "Authentication bypass detected"
    }
  ]
}
```

## Supported Databases

- MongoDB
- CouchDB
- Elasticsearch
- Firebase

## Security Notice

‚ö†Ô∏è This tool should only be used for security testing with proper authorization. Unauthorized testing may be illegal.

## License

MIT License
